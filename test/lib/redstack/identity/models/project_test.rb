require 'test_helper'

class IdentityProjectTests < MiniTest::Spec

  include RedStack::Identity::Models
  include CommonTestHelperMethods

  # Helper methods specific to these tests

  def new_attributes
    {
      name:         'REDSTACK_CREATED_PROJECT_FOR_TESTING',
      description:  'This is a project generated by RedStack',
      enabled:      true
    }
  end

  def updated_attributes
    {
      name:         'REDSTACK_UPDATE_PROJECT_TEST',
      description:  'This is a project updated by RedStack',
      enabled:      false
    }
  end

  # Tests

  describe 'RedStack::Identity::Models::Project::find' do

    it 'can retrieve a user\'s projects' do
      projects = Project.find(
                   endpoint_type: 'public',
                   token:         non_admin_default_token,
                   connection:    os.connection
                 )

      projects.must_be_instance_of Array
      projects.length.wont_be_nil
      projects.each { |p| p.must_be_instance_of Project }
    end



    it 'can retrieve all projects' do
      some_projects = Project.find(
                        endpoint_type: 'public',
                        token:         non_admin_default_token,
                        connection:    os.connection
                      )

      all_projects = Project.find(
                       endpoint_type: 'admin',
                       token:         admin_scoped_token,
                       connection:    os.connection
                     )

      all_projects.length.must_be :>, some_projects.length
    end

  end


  describe 'RedStack::Identity::Models::Project::create' do

    it 'creates a project' do
      project = Project.create(
                  attributes: new_attributes,
                  token:      admin_scoped_token,
                  connection: os.connection
                )

      project.must_be_instance_of Project
      project['name'].must_equal new_attributes[:name]
      project['description'].must_equal new_attributes[:description]
      project['enabled'].must_equal new_attributes[:enabled]

      # Cleanup
      project.delete!
    end

  end

  describe 'RedStack::Identity::Models::Project#grant' do

    it 'grants a user with a role in the project' do
      skip
      # Setup
      attrs = new_attributes
      attrs[:name] += 'project_grant'

      project = Project.create(
                  attributes:  attrs,
                  token:       admin_scoped_token,
                  connection:  os.connection,
                  querystring: 'before_project_grant'
                )

      user = User.find(
               where:       { username: new_attributes[:username] },
               token:       admin_scoped_token,
               connection:  os.connection,
               querystring: 'before_project_grant'
             ).first

      role = Role.find(
               where:       { name: 'admin' },
               token:       admin_scoped_token,
               connection:  os.connection,
               querystring: 'before_project_grant'
             ).first

      # Exercise
      result = project.grant user: user, with_role: role

      # Check
      result.must_equal true
      users = project.users querystring: 'after_project_grant'
      users.collect{ |u| u[:id] == user[:id] }.length.must_equal 1

      # Cleanup
      project.delete!
    end

  end

  describe 'RedStack::Identity::Models::Project#save!' do

    it 'saves changes' do
      # the querystring param is so that the VCR gem doesn't use
      # the same mocks used in other tests.
      project = Project.create(
                  attributes:  new_attributes,
                  token:       admin_scoped_token,
                  connection:  os.connection,
                  querystring: 'before_project_update'
                )

      project[:name]        = updated_attributes[:name]
      project[:description] = updated_attributes[:description]
      project[:enabled]     = updated_attributes[:enabled]
      project.save!

      projects = Project.find(
                token:        admin_scoped_token,
                connection:   os.connection,
                querystring: 'after_project_update'
              )

      project = projects.find { |p| p[:id] == project[:id] }

      project.wont_be_nil
      project[:name].must_equal updated_attributes[:name]
      project[:description].must_equal updated_attributes[:description]
      project[:enabled].must_equal updated_attributes[:enabled]

      # Cleanup
      project.delete!
    end

    it 'saves changes using an authorized user\'s default token' do
      skip

      project = Project.create(
                  attributes:  new_attributes,
                  token:       admin_scoped_token,
                  connection:  os.connection,
                  querystring: 'before_update_using_default_token'
                )

      # Give admin user the admin role in the new project
      project.grant user: admin_user, with_role: admin_role

      # Re-load the project using the admin user's _default_ token
      project = Project.find(
                  endpoint_type: 'public',
                  token:         non_admin_default_token,
                  connection:    os.connection,
                  querystring:   'before_update_using_default_token'
                ).find{ |p| p[:id] == project[:id] }

      # Change an attribute in the project
      project[:description] = updated_attributes[:description]

      # Save the project (NOTE that at this point the admin
      # user's default token is still associated with the project)
      save_method = lambda do
        project.save!
      end

      save_method.wont_raise RedStack::NotAuthorizedError

      # Exercise the code
      error = save_method.call rescue $!

      # Assertions
      error.message.must_be_nil

      project = Project.find(
                  endpoint_type: 'public',
                  token:         admin_default_token,
                  connection:    os.connection,
                  querystring:   'after_update_using_default_token'
                ).find{ |p| p[:id] == project[:id] }

      project[:description].must_equal updated_attributes[:description]

      # Cleanup
      project.delete!
    end

  end


  describe 'RedStack::Identity::Models::Project#dirty?' do

    it 'is true when one or more attributes change' do
      project = Project.create(
                  attributes: new_attributes,
                  token:      admin_scoped_token,
                  connection: os.connection
                )

      project[:name] = updated_attributes[:name]

      project.dirty?.must_equal true

      # Cleanup
      project.delete!
    end


    it 'is false when an attribute is assigned the same value' do
      project = Project.create(
                  attributes: new_attributes,
                  token:      admin_scoped_token,
                  connection: os.connection
                )

      project[:name] = new_attributes[:name]

      project.dirty?.must_equal false

      # Cleanup
      project.delete!
    end


    it 'is false after changes have been saved' do
      project = Project.create(
                  attributes:  new_attributes,
                  token:       admin_scoped_token,
                  connection:  os.connection,
                  querystring: 'project_dirtiness_test'
                )

      project[:name]        = updated_attributes[:name]
      project[:description] = updated_attributes[:description]
      project[:enabled]     = updated_attributes[:enabled]
      project.save!

      project.dirty?.must_equal false

      # Cleanup
      project.delete!
    end

  end

  describe 'RedStack::Identity::Models::Project#delete!' do

    it 'deletes a project' do
      project = Project.create(
                  attributes: new_attributes,
                  token:      admin_scoped_token,
                  connection: os.connection
                )

      project.delete!.must_equal true

      projects = Project.find(
                token:        admin_scoped_token,
                connection:   os.connection,
                querystring: 'after_project_delete'
              )

      project = projects.find { |p| p[:id] == project[:id] }
      project.must_be_nil
    end

  end

  describe 'RedStack::Identity::Models::Project#users' do

    it 'retrieves the users of a project' do
      project = Project.find(
                  where:        { name: 'admin' },
                  token:        admin_scoped_token,
                  connection:   os.connection,
                  querystring:  'get_project_users_test'
                ).first

      users = project.users querystring: 'get_project_users_test'

      users.must_be_instance_of Array
      users.length.must_be :>=, 1
    end

  end

end